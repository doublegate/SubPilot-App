// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // For credential-based auth (development)

  // Notification preferences stored as JSON
  notificationPreferences Json @default("{\"emailAlerts\":true,\"pushNotifications\":true,\"weeklyReports\":true}")

  // Security fields for account lockout
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?

  // Admin flag
  isAdmin      Boolean  @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts      Account[]      // OAuth accounts for authentication
  bankAccounts  BankAccount[]  // Bank accounts from Plaid
  sessions      Session[]
  userSessions  UserSession[]  // Enhanced session management
  plaidItems    PlaidItem[]
  subscriptions Subscription[]
  transactions  Transaction[]
  notifications Notification[]
  auditLogs     AuditLog[]
  cancellationRequests CancellationRequest[]
  conversations       Conversation[]
  
  // Billing Relations
  userSubscription    UserSubscription?
  accountMemberships  AccountMember[]
  billingEvents       BillingEvent[]

  @@map("users")
}

// OAuth Account (for Auth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Bank Account Information (from Plaid)
model BankAccount {
  id                String  @id @default(cuid())
  userId            String
  plaidAccountId    String  @unique
  plaidItemId       String

  // Account Details
  name              String
  officialName      String?
  mask              String  // Last 4 digits
  type              String  // depository, credit, loan, investment
  subtype           String  // checking, savings, credit card, etc.

  // Balance Information
  availableBalance  Decimal?
  currentBalance    Decimal
  isoCurrencyCode   String  @default("USD")

  // Status
  isActive          Boolean @default(true)
  lastSync          DateTime @default(now())

  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plaidItem         PlaidItem @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@index([userId])
  @@index([plaidAccountId])
  @@index([userId, isActive]) // For active account queries
  @@map("bank_accounts")
}

// Plaid Item (Bank Connection)
model PlaidItem {
  id                String   @id @default(cuid())
  userId            String
  plaidItemId       String   @unique
  accessToken       String   // Encrypted in application layer

  // Institution Information
  institutionId     String
  institutionName   String
  institutionLogo   String?

  // Plaid Product Information
  availableProducts Json     @default("[]")
  billedProducts    Json     @default("[]")

  // Connection Status
  status            String   @default("good") // good, bad, requires_update, error, pending_expiration, inactive
  lastWebhook       DateTime?
  needsSync         Boolean  @default(false)
  isActive          Boolean  @default(true)
  errorCode         String?
  errorMessage      String?
  syncCursor        String?  // Cursor for incremental transaction sync

  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccounts      BankAccount[]

  @@index([userId])
  @@index([plaidItemId])
  @@map("plaid_items")
}

// Financial Transactions
model Transaction {
  id                    String   @id @default(cuid())
  userId                String
  accountId             String
  plaidTransactionId    String   @unique
  subscriptionId        String?

  // Transaction Details
  amount                Decimal
  isoCurrencyCode       String   @default("USD")
  description           String
  merchantName          String?
  category              Json     @default("[]") // Plaid categories array
  subcategory           String?
  transactionType       String   @default("other")

  // Dates
  date                  DateTime
  authorizedDate        DateTime?
  pending               Boolean  @default(false)

  // Additional Information
  paymentChannel        String?  // online, in store, etc.
  location              Json?    // Geographic data

  // Subscription Detection
  confidence            Decimal  @default(0) // 0-1 confidence score
  isSubscription        Boolean  @default(false)
  
  // AI Categorization
  aiCategory            String?  // AI-detected category
  aiCategoryConfidence  Decimal? // Confidence score for AI categorization
  normalizedMerchantName String? // AI-normalized merchant name

  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount           BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([date])
  @@index([isSubscription])
  @@index([plaidTransactionId])
  @@index([userId, date, isSubscription]) // Compound index for analytics queries
  @@index([merchantName, userId]) // For subscription detection
  @@index([accountId, date]) // For account-specific queries
  @@index([subscriptionId]) // For subscription-related queries
  @@map("transactions")
}

// Subscription Management
model Subscription {
  id                    String   @id @default(cuid())
  userId                String

  // Subscription Details
  name                  String
  description           String?
  category              String?
  notes                 String?
  
  // AI Categorization
  aiCategory            String?  // AI-detected category (overrides category if set)
  aiCategoryConfidence  Decimal? // Confidence score for AI categorization
  categoryOverride      String?  // Manual category override by user
  amount                Decimal
  currency              String   @default("USD")
  frequency             String   // monthly, yearly, weekly, quarterly

  // Billing Information
  nextBilling           DateTime?
  lastBilling           DateTime?

  // Status
  status                String   @default("active") // active, cancelled, paused
  isActive              Boolean  @default(true)

  // Provider Information (JSON)
  provider              Json     @default("{}")
  cancellationInfo       Json     @default("{}")

  // Detection Metadata
  detectionConfidence   Decimal  @default(0)
  detectedAt            DateTime @default(now())

  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions          Transaction[]
  history               SubscriptionHistory[]
  notifications         Notification[]
  cancellationRequests  CancellationRequest[]

  @@index([userId])
  @@index([status])
  @@index([nextBilling])
  @@index([userId, status, isActive]) // Compound index for active subscription queries
  @@index([userId, nextBilling]) // For upcoming renewals
  @@index([userId, category]) // For category filtering
  @@map("subscriptions")
}

// Subscription Billing History
model SubscriptionHistory {
  id              String   @id @default(cuid())
  subscriptionId  String
  amount          Decimal
  billingDate     DateTime
  status          String   // charged, failed, refunded
  transactionId   String?

  // Timestamps
  createdAt       DateTime @default(now())

  // Relations
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([billingDate])
  @@map("subscription_history")
}

// Notification System
model Notification {
  id              String    @id @default(cuid())
  userId          String
  subscriptionId  String?

  // Notification Content
  type            String    // renewal_reminder, price_change, trial_ending, new_subscription
  title           String
  message         String
  severity        String    @default("info") // info, warning, error
  data            Json      @default("{}")

  // Status
  read            Boolean   @default(false)
  readAt          DateTime?

  // Scheduling
  scheduledFor    DateTime
  sentAt          DateTime?

  // Timestamps
  createdAt       DateTime  @default(now())

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([scheduledFor])
  @@index([userId, read, scheduledFor]) // Compound index for unread notification queries
  @@map("notifications")
}

// Authentication (Auth.js)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enhanced Session Management with Security Features
model UserSession {
  id           String   @id @default(cuid())
  userId       String
  fingerprint  String   @unique
  ip           String
  userAgent    String
  deviceInfo   Json
  
  // Activity Tracking
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  
  // Status
  isActive     Boolean  @default(true)
  revokedAt    DateTime?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([fingerprint])
  @@index([expiresAt])
  @@map("user_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Security audit logging
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // e.g., 'user.login', 'auth.failed', 'bank.connected'
  resource  String?  // Resource identifier (e.g., subscription ID, bank ID)
  ipAddress String?
  userAgent String?
  result    String   // 'success' or 'failure'
  metadata  Json?    // Additional data as JSON
  error     String?  // Error message if failure
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  // Indexes for efficient querying
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

// Category hierarchy for subscriptions
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  parentId    String?
  
  // Metadata
  keywords    Json     @default("[]") // Array of keywords for matching
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  @@index([parentId])
  @@index([name])
  @@map("categories")
}

// Merchant name aliases for better categorization
model MerchantAlias {
  id               String   @id @default(cuid())
  originalName     String   @unique // The raw merchant name from transactions
  normalizedName   String   // The clean, normalized name
  category         String?  // Default category for this merchant
  
  // Metadata
  confidence       Decimal  @default(1.0) // Confidence in this alias mapping
  isVerified       Boolean  @default(false) // Manually verified by admin
  usageCount       Int      @default(0) // How many times this alias was used
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastUsedAt       DateTime @default(now())
  
  @@index([originalName])
  @@index([normalizedName])
  @@index([category])
  @@map("merchant_aliases")
}

// Cancellation Provider Configuration
model CancellationProvider {
  id                String   @id @default(cuid())
  name              String   @unique // e.g., "Netflix", "Spotify"
  normalizedName    String   // Lowercase, no spaces version
  type              String   // api, web_automation, manual
  
  // Integration Details
  apiEndpoint       String?  // API endpoint for direct integration
  apiVersion        String?  // API version to use
  requiresAuth      Boolean  @default(true)
  authType          String?  // oauth, api_key, basic
  
  // Web Automation Details
  automationScript  Json     @default("{}") // Playwright script configuration
  loginUrl          String?  // URL to start cancellation flow
  selectors         Json     @default("{}") // CSS selectors for automation
  
  // Manual Cancellation Info
  phoneNumber       String?  // Customer service number
  email             String?  // Support email
  chatUrl           String?  // Live chat URL
  instructions      Json     @default("[]") // Step-by-step instructions
  
  // Metadata
  logo              String?  // Provider logo URL
  category          String?  // Service category (streaming, software, etc.)
  difficulty        String   @default("medium") // easy, medium, hard
  averageTime       Int?     // Average cancellation time in minutes
  successRate       Decimal  @default(0.0) // Historical success rate
  
  // Feature Flags
  isActive          Boolean  @default(true)
  supportsRefunds   Boolean  @default(false)
  requires2FA       Boolean  @default(false)
  requiresRetention Boolean  @default(false) // Retention offer likely
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  cancellationRequests CancellationRequest[]
  
  @@index([normalizedName])
  @@index([type])
  @@index([category])
  @@map("cancellation_providers")
}

// Cancellation Request Tracking
model CancellationRequest {
  id                String   @id @default(cuid())
  userId            String
  subscriptionId    String
  providerId        String?
  
  // Request Details
  status            String   @default("pending") // pending, processing, completed, failed, cancelled
  method            String   // api, web_automation, manual
  priority          String   @default("normal") // low, normal, high
  
  // Attempt Tracking
  attempts          Int      @default(0)
  maxAttempts       Int      @default(3)
  lastAttemptAt     DateTime?
  nextRetryAt       DateTime?
  
  // Results
  confirmationCode  String?  // Cancellation confirmation number
  refundAmount      Decimal? // If refund was processed
  effectiveDate     DateTime? // When cancellation takes effect
  
  // Error Handling
  errorCode         String?  // Structured error code
  errorMessage      String?  // Human-readable error
  errorDetails      Json     @default("{}") // Full error context
  
  // Automation Details
  screenshots       Json     @default("[]") // Array of screenshot URLs
  automationLog     Json     @default("[]") // Step-by-step automation log
  
  // Manual Fallback
  manualInstructions Json    @default("{}") // Generated instructions
  userConfirmed     Boolean  @default(false) // User confirmed manual cancellation
  userNotes         String?  // User's notes about the cancellation
  
  // Metadata
  ipAddress         String?
  userAgent         String?
  sessionId         String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  completedAt       DateTime?
  
  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  provider          CancellationProvider? @relation(fields: [providerId], references: [id])
  logs              CancellationLog[]
  
  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
  @@index([userId, status])
  @@index([createdAt])
  @@map("cancellation_requests")
}

// Cancellation Activity Log
model CancellationLog {
  id                String   @id @default(cuid())
  requestId         String
  
  // Log Details
  action            String   // started, retry, screenshot_taken, error, completed, etc.
  status            String   // success, failure, info
  message           String
  
  // Additional Context
  metadata          Json     @default("{}") // Any additional data
  duration          Int?     // Duration in milliseconds
  
  // Timestamps
  createdAt         DateTime @default(now())
  
  // Relations
  request           CancellationRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  @@index([requestId])
  @@index([action])
  @@index([createdAt])
  @@map("cancellation_logs")
}

// AI Assistant Conversation
model Conversation {
  id           String   @id @default(cuid())
  userId       String
  
  // Conversation Details
  title        String?  // Auto-generated or user-defined title
  summary      String?  // AI-generated summary of conversation
  
  // Metadata
  lastMessageAt DateTime @default(now())
  messageCount  Int      @default(0)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]
  actions      AssistantAction[]
  
  @@index([userId])
  @@index([lastMessageAt])
  @@index([userId, lastMessageAt]) // For fetching recent conversations
  @@map("conversations")
}

// AI Assistant Messages
model Message {
  id             String   @id @default(cuid())
  conversationId String
  
  // Message Content
  role           String   // user, assistant, system
  content        String   @db.Text
  
  // Metadata
  metadata       Json     @default("{}") // Token count, model used, etc.
  
  // For assistant messages
  functionCall   Json?    // If the message includes a function call
  toolCalls      Json     @default("[]") // Array of tool calls made
  
  // Timestamps
  createdAt      DateTime @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([createdAt])
  @@map("messages")
}

// AI Assistant Actions
model AssistantAction {
  id             String   @id @default(cuid())
  conversationId String
  messageId      String?  // Reference to the message that triggered this action
  
  // Action Details
  type           String   // cancel_subscription, analyze_spending, etc.
  status         String   @default("pending") // pending, confirmed, executing, completed, failed
  
  // Action Data
  targetResource String?  // ID of subscription, etc.
  parameters     Json     @default("{}") // Action-specific parameters
  
  // Execution Results
  result         Json?    // Result of the action
  error          String?  // Error message if failed
  
  // User Interaction
  requiresConfirmation Boolean @default(true)
  userConfirmed       Boolean @default(false)
  userConfirmedAt     DateTime?
  userRejectedAt      DateTime?
  
  // Timestamps
  createdAt      DateTime @default(now())
  executedAt     DateTime?
  completedAt    DateTime?
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([status])
  @@index([type])
  @@map("assistant_actions")
}

// Pricing Plans for Premium Tiers
model PricingPlan {
  id               String   @id @default(cuid())
  name             String   @unique // free, pro, team, enterprise
  displayName      String   // Free, Professional, Team, Enterprise
  description      String?
  
  // Pricing
  price            Decimal  // Monthly price
  currency         String   @default("USD")
  stripePriceId    String?  @unique // Stripe Price ID for billing
  
  // Features (JSON array of feature flags)
  features         Json     @default("[]")
  
  // Limits
  maxBankAccounts  Int      @default(2)
  maxTeamMembers   Int      @default(1)
  
  // Metadata
  isActive         Boolean  @default(true)
  sortOrder        Int      @default(0)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  userSubscriptions UserSubscription[]
  
  @@index([name])
  @@index([isActive])
  @@map("pricing_plans")
}

// User Subscription (ties user to pricing plan)
model UserSubscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  planId                String
  
  // Stripe Integration
  stripeCustomerId      String?  @unique
  stripeSubscriptionId  String?  @unique
  stripePriceId         String?
  
  // Subscription Details
  status                String   @default("active") // active, past_due, canceled, incomplete
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  canceledAt            DateTime?
  
  // Usage Tracking
  bankAccountsUsed      Int      @default(0)
  
  // Trial Information
  trialStart            DateTime?
  trialEnd              DateTime?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                  PricingPlan @relation(fields: [planId], references: [id])
  billingEvents         BillingEvent[]
  
  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@map("user_subscriptions")
}

// Multi-Account Support (Teams/Families)
model TeamAccount {
  id                String   @id @default(cuid())
  name              String
  type              String   @default("personal") // personal, family, team
  
  // Owner
  ownerId           String
  
  // Metadata
  isActive          Boolean  @default(true)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  members           AccountMember[]
  
  @@index([ownerId])
  @@index([type])
  @@map("team_accounts")
}

// Account Membership
model AccountMember {
  id                String   @id @default(cuid())
  accountId         String
  userId            String
  
  // Role
  role              String   @default("member") // owner, admin, member
  
  // Permissions (JSON)
  permissions       Json     @default("[]")
  
  // Status
  status            String   @default("active") // active, invited, suspended
  invitedAt         DateTime?
  joinedAt          DateTime?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  teamAccount       TeamAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([accountId, userId])
  @@index([accountId])
  @@index([userId])
  @@index([status])
  @@map("account_members")
}

// Billing Events for tracking
model BillingEvent {
  id                    String   @id @default(cuid())
  userId                String
  userSubscriptionId    String?
  
  // Event Details
  type                  String   // subscription_created, payment_succeeded, payment_failed, etc.
  amount                Decimal?
  currency              String   @default("USD")
  
  // Stripe Details
  stripeEventId         String?  @unique
  stripeInvoiceId       String?
  stripePaymentIntentId String?
  
  // Metadata
  metadata              Json     @default("{}")
  
  // Status
  status                String   @default("pending") // pending, completed, failed
  
  // Timestamps
  createdAt             DateTime @default(now())
  
  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userSubscription      UserSubscription? @relation(fields: [userSubscriptionId], references: [id])
  
  @@index([userId])
  @@index([userSubscriptionId])
  @@index([type])
  @@index([stripeEventId])
  @@index([createdAt])
  @@map("billing_events")
}