// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // For credential-based auth (development)

  // Notification preferences stored as JSON
  notificationPreferences Json @default("{\"emailAlerts\":true,\"pushNotifications\":true,\"weeklyReports\":true}")

  // Security fields for account lockout
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts      Account[]      // OAuth accounts for authentication
  bankAccounts  BankAccount[]  // Bank accounts from Plaid
  sessions      Session[]
  plaidItems    PlaidItem[]
  subscriptions Subscription[]
  transactions  Transaction[]
  notifications Notification[]
  auditLogs     AuditLog[]

  @@map("users")
}

// OAuth Account (for Auth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Bank Account Information (from Plaid)
model BankAccount {
  id                String  @id @default(cuid())
  userId            String
  plaidAccountId    String  @unique
  plaidItemId       String

  // Account Details
  name              String
  officialName      String?
  mask              String  // Last 4 digits
  type              String  // depository, credit, loan, investment
  subtype           String  // checking, savings, credit card, etc.

  // Balance Information
  availableBalance  Decimal?
  currentBalance    Decimal
  isoCurrencyCode   String  @default("USD")

  // Status
  isActive          Boolean @default(true)
  lastSync          DateTime @default(now())

  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plaidItem         PlaidItem @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@index([userId])
  @@index([plaidAccountId])
  @@index([userId, isActive]) // For active account queries
  @@map("bank_accounts")
}

// Plaid Item (Bank Connection)
model PlaidItem {
  id                String   @id @default(cuid())
  userId            String
  plaidItemId       String   @unique
  accessToken       String   // Encrypted in application layer

  // Institution Information
  institutionId     String
  institutionName   String
  institutionLogo   String?

  // Plaid Product Information
  availableProducts Json     @default("[]")
  billedProducts    Json     @default("[]")

  // Connection Status
  status            String   @default("good") // good, bad, requires_update, error, pending_expiration, inactive
  lastWebhook       DateTime?
  needsSync         Boolean  @default(false)
  isActive          Boolean  @default(true)
  errorCode         String?
  errorMessage      String?
  syncCursor        String?  // Cursor for incremental transaction sync

  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccounts      BankAccount[]

  @@index([userId])
  @@index([plaidItemId])
  @@map("plaid_items")
}

// Financial Transactions
model Transaction {
  id                    String   @id @default(cuid())
  userId                String
  accountId             String
  plaidTransactionId    String   @unique
  subscriptionId        String?

  // Transaction Details
  amount                Decimal
  isoCurrencyCode       String   @default("USD")
  description           String
  merchantName          String?
  category              Json     @default("[]") // Plaid categories array
  subcategory           String?
  transactionType       String   @default("other")

  // Dates
  date                  DateTime
  authorizedDate        DateTime?
  pending               Boolean  @default(false)

  // Additional Information
  paymentChannel        String?  // online, in store, etc.
  location              Json?    // Geographic data

  // Subscription Detection
  confidence            Decimal  @default(0) // 0-1 confidence score
  isSubscription        Boolean  @default(false)
  
  // AI Categorization
  aiCategory            String?  // AI-detected category
  aiCategoryConfidence  Decimal? // Confidence score for AI categorization
  normalizedMerchantName String? // AI-normalized merchant name

  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount           BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([date])
  @@index([isSubscription])
  @@index([plaidTransactionId])
  @@index([userId, date, isSubscription]) // Compound index for analytics queries
  @@index([merchantName, userId]) // For subscription detection
  @@index([accountId, date]) // For account-specific queries
  @@index([subscriptionId]) // For subscription-related queries
  @@map("transactions")
}

// Subscription Management
model Subscription {
  id                    String   @id @default(cuid())
  userId                String

  // Subscription Details
  name                  String
  description           String?
  category              String?
  notes                 String?
  
  // AI Categorization
  aiCategory            String?  // AI-detected category (overrides category if set)
  aiCategoryConfidence  Decimal? // Confidence score for AI categorization
  categoryOverride      String?  // Manual category override by user
  amount                Decimal
  currency              String   @default("USD")
  frequency             String   // monthly, yearly, weekly, quarterly

  // Billing Information
  nextBilling           DateTime?
  lastBilling           DateTime?

  // Status
  status                String   @default("active") // active, cancelled, paused
  isActive              Boolean  @default(true)

  // Provider Information (JSON)
  provider              Json     @default("{}")
  cancellationInfo       Json     @default("{}")

  // Detection Metadata
  detectionConfidence   Decimal  @default(0)
  detectedAt            DateTime @default(now())

  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions          Transaction[]
  history               SubscriptionHistory[]
  notifications         Notification[]

  @@index([userId])
  @@index([status])
  @@index([nextBilling])
  @@index([userId, status, isActive]) // Compound index for active subscription queries
  @@index([userId, nextBilling]) // For upcoming renewals
  @@index([userId, category]) // For category filtering
  @@map("subscriptions")
}

// Subscription Billing History
model SubscriptionHistory {
  id              String   @id @default(cuid())
  subscriptionId  String
  amount          Decimal
  billingDate     DateTime
  status          String   // charged, failed, refunded
  transactionId   String?

  // Timestamps
  createdAt       DateTime @default(now())

  // Relations
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([billingDate])
  @@map("subscription_history")
}

// Notification System
model Notification {
  id              String    @id @default(cuid())
  userId          String
  subscriptionId  String?

  // Notification Content
  type            String    // renewal_reminder, price_change, trial_ending, new_subscription
  title           String
  message         String
  data            Json      @default("{}")

  // Status
  read            Boolean   @default(false)
  readAt          DateTime?

  // Scheduling
  scheduledFor    DateTime
  sentAt          DateTime?

  // Timestamps
  createdAt       DateTime  @default(now())

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([scheduledFor])
  @@index([userId, read, scheduledFor]) // Compound index for unread notification queries
  @@map("notifications")
}

// Authentication (Auth.js)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Security audit logging
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // e.g., 'user.login', 'auth.failed', 'bank.connected'
  resource  String?  // Resource identifier (e.g., subscription ID, bank ID)
  ipAddress String?
  userAgent String?
  result    String   // 'success' or 'failure'
  metadata  Json?    // Additional data as JSON
  error     String?  // Error message if failure
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  // Indexes for efficient querying
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

// Category hierarchy for subscriptions
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  parentId    String?
  
  // Metadata
  keywords    Json     @default("[]") // Array of keywords for matching
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  @@index([parentId])
  @@index([name])
  @@map("categories")
}

// Merchant name aliases for better categorization
model MerchantAlias {
  id               String   @id @default(cuid())
  originalName     String   @unique // The raw merchant name from transactions
  normalizedName   String   // The clean, normalized name
  category         String?  // Default category for this merchant
  
  // Metadata
  confidence       Decimal  @default(1.0) // Confidence in this alias mapping
  isVerified       Boolean  @default(false) // Manually verified by admin
  usageCount       Int      @default(0) // How many times this alias was used
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastUsedAt       DateTime @default(now())
  
  @@index([originalName])
  @@index([normalizedName])
  @@index([category])
  @@map("merchant_aliases")
}