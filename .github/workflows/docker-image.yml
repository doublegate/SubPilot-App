# DISABLED: This workflow has been replaced by ci-cd-complete.yml
# The docker-image.yml workflow is disabled due to repository name case sensitivity issues
# All functionality has been merged into the optimized ci-cd-complete.yml workflow

name: Docker Image CI (DISABLED)

on:
  # Disabled - replaced by ci-cd-complete.yml
  workflow_dispatch:
    inputs:
      force_enable:
        description: 'Force enable this disabled workflow'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          SKIP_ENV_VALIDATION=true
          NODE_ENV=production
          DATABASE_URL=postgresql://placeholder:password@localhost:5432/placeholder
          NEXTAUTH_URL=http://localhost:3000
          BUILD_AUTH_TOKEN=placeholder-token-for-build
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Run container in background with health check
        docker run -d \
          --name subpilot-test \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=3 \
          -p 3000:3000 \
          -e SKIP_ENV_VALIDATION=true \
          -e NODE_ENV=production \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
          -e NEXTAUTH_URL=http://localhost:3000 \
          -e NEXTAUTH_SECRET=test-secret-for-docker-test \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for container to be healthy
        echo "Waiting for container to become healthy..."
        timeout 60 bash -c 'until docker inspect --format="{{.State.Health.Status}}" subpilot-test | grep -q "healthy"; do sleep 2; done'
        
        # Test the health endpoint
        sleep 5
        if curl -f http://localhost:3000/api/health; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          docker logs subpilot-test
          exit 1
        fi
        
        # Cleanup
        docker stop subpilot-test
        docker rm subpilot-test

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest to staging"
        echo "This would typically involve:"
        echo "  - Updating Kubernetes manifests"
        echo "  - Rolling deployment to staging cluster"
        echo "  - Running smoke tests"
        echo "  - Updating deployment status"
        
        # Example deployment command (replace with actual deployment logic):
        # kubectl set image deployment/subpilot-app subpilot-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        echo "‚úÖ Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} to production"
        echo "Tag: ${{ github.ref_name }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        
        echo "This would typically involve:"
        echo "  - Blue/green deployment strategy"
        echo "  - Database migrations (if needed)"
        echo "  - Health checks and rollback capability"
        echo "  - Updating production monitoring"
        
        # Example production deployment command:
        # kubectl set image deployment/subpilot-app subpilot-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        
        echo "‚úÖ Production deployment completed"

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "üßπ Cleaning up old Docker images"
        echo "This would typically remove images older than 30 days"
        echo "while keeping the latest 10 versions for rollback capability"
        
        # Example cleanup (requires GitHub API or registry-specific tools):
        # gh api --paginate /orgs/ORG/packages/container/PACKAGE/versions | jq '.[].id' | tail -n +11 | xargs -I {} gh api --method DELETE /orgs/ORG/packages/container/PACKAGE/versions/{}
        
        echo "‚úÖ Cleanup completed"