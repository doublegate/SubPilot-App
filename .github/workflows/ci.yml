name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.18'

jobs:
  # Job 1: Code Quality & Build
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate project configuration
        run: |
          echo "🔍 Validating project configuration..."
          
          # Check required config files exist
          test -f tsconfig.json || { echo "❌ tsconfig.json missing"; exit 1; }
          test -f next.config.js || { echo "❌ next.config.js missing"; exit 1; }
          test -f package.json || { echo "❌ package.json missing"; exit 1; }
          
          # Validate TypeScript config
          npx tsc --noEmit --skipLibCheck || { echo "❌ TypeScript config invalid"; exit 1; }
          
          echo "✅ Project configuration valid"

      - name: Run linting
        run: |
          echo "🔍 Running ESLint..."
          if npm run lint; then
            echo "✅ No linting errors"
          else
            echo "⚠️  Linting issues found (continuing in development mode)"
            echo "🔧 Run 'npm run lint:fix' to auto-fix issues"
          fi
        continue-on-error: true

      - name: Run Prettier check  
        run: |
          echo "💄 Checking code formatting..."
          if npm run format:check; then
            echo "✅ Code formatting is correct"
          else
            echo "⚠️  Formatting issues found (continuing in development mode)"
            echo "🔧 Run 'npm run format' to fix formatting"
          fi
        continue-on-error: true

      - name: Run TypeScript check
        run: npm run type-check
        continue-on-error: false

      - name: Build application
        run: |
          echo "🏗️ Building Next.js application..."
          
          # Set environment variables for build
          export SKIP_ENV_VALIDATION=true
          export NODE_ENV=production
          export NEXTAUTH_SECRET="ci-test-secret"
          export NEXTAUTH_URL="http://localhost:3000"
          
          # Build with lint disabled for development mode
          npm run build:ci
          
          echo "✅ Build completed successfully (linting handled separately)"

      - name: Create build artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "📦 Creating build artifacts..."
          
          # Create artifact directory
          mkdir -p artifacts
          
          # Create production build archive
          tar -czf artifacts/subpilot-${{ github.ref_name }}-build.tar.gz \
            .next \
            public \
            package.json \
            package-lock.json \
            prisma \
            next.config.js \
            tsconfig.json
          
          # Create source code archive
          git archive --format=tar.gz --prefix=subpilot-${{ github.ref_name }}/ \
            -o artifacts/subpilot-${{ github.ref_name }}-source.tar.gz HEAD
          
          # Create checksums
          cd artifacts
          sha256sum *.tar.gz > checksums.sha256
          
          echo "✅ Artifacts created successfully"
          ls -lah

      - name: Upload build artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/
          retention-days: 30

      - name: Set build status
        id: build-status
        run: echo "success=true" >> $GITHUB_OUTPUT

      - name: Build summary
        run: |
          echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ✅ Installed | Node.js ${{ env.NODE_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ✅ Valid | TypeScript & Next.js configs OK |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ⚠️ Issues found | Development mode - non-blocking |" >> $GITHUB_STEP_SUMMARY
          echo "| Formatting | ⚠️ Issues found | Development mode - non-blocking |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ✅ Compiled | No type errors |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ✅ Success | Next.js application built |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Development Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality checks are in **development mode** (non-blocking)" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`npm run lint:fix\` and \`npm run format\` to fix issues" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript compilation and build process are fully functional" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline completed at:** $(date)" >> $GITHUB_STEP_SUMMARY

  # Job 2: Testing (Future implementation when tests are added)
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Run unit tests
  #       run: npm test
  #     - name: Run E2E tests
  #       run: npm run test:e2e

  # Job 3: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "🔒 Running security audit..."
          
          # Run audit and capture output
          if npm audit --audit-level=moderate; then
            echo "✅ No security vulnerabilities found"
          else
            echo "⚠️  Security vulnerabilities detected"
            echo "📊 Audit summary:"
            npm audit --audit-level=moderate --json | jq '.metadata.vulnerabilities' || true
            echo "ℹ️  Run 'npm audit fix' to address fixable issues"
            # Don't fail CI for audit issues, but log them
          fi

  # Job 4: Docker Build (for releases)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image health
        run: |
          # Build and load image for testing
          docker buildx build --load -t test-image:latest .
          
          # Set required environment variables for Docker run
          docker run -d --name test-app -p 3000:3000 \
            -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
            -e NEXTAUTH_SECRET="test-secret-for-docker-health-check" \
            -e NEXTAUTH_URL="http://localhost:3000" \
            -e SKIP_ENV_VALIDATION="true" \
            test-image:latest
          
          # Wait for startup
          echo "⏳ Waiting for application startup..."
          sleep 15
          
          # Test health endpoint
          echo "🔍 Testing health endpoint..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/api/health; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⚠️  Health check failed on attempt $i, retrying..."
              if [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts"
                echo "📋 Container logs:"
                docker logs test-app
                exit 1
              fi
              sleep 3
            fi
          done
          
          # Cleanup
          docker stop test-app
          docker rm test-app

      - name: Export Docker image
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "🐳 Exporting Docker image..."
          
          # Create artifacts directory
          mkdir -p docker-artifacts
          
          # Save Docker image
          docker save test-image:latest | gzip > docker-artifacts/subpilot-${{ github.ref_name }}-docker.tar.gz
          
          # Create Docker compose file
          cat > docker-artifacts/docker-compose.yml << EOF
          version: '3.8'
          services:
            app:
              image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
              ports:
                - "3000:3000"
              environment:
                - DATABASE_URL=\${DATABASE_URL}
                - NEXTAUTH_SECRET=\${NEXTAUTH_SECRET}
                - NEXTAUTH_URL=\${NEXTAUTH_URL}
              restart: unless-stopped
          EOF
          
          # Create README
          cat > docker-artifacts/README.md << EOF
          # SubPilot Docker Image
          
          Version: ${{ github.ref_name }}
          
          ## Loading the image
          \`\`\`bash
          docker load -i subpilot-${{ github.ref_name }}-docker.tar.gz
          \`\`\`
          
          ## Running with docker-compose
          1. Create a .env file with required variables
          2. Run: \`docker-compose up -d\`
          
          ## Required Environment Variables
          - DATABASE_URL
          - NEXTAUTH_SECRET
          - NEXTAUTH_URL
          EOF
          
          echo "✅ Docker artifacts created"
          ls -lah docker-artifacts/

      - name: Upload Docker artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: docker-artifacts
          path: docker-artifacts/
          retention-days: 30

  # Job 5: Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, security, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/

      - name: Download Docker artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-artifacts
          path: docker-artifacts/
        continue-on-error: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: |
            🚀 **SubPilot Release ${{ github.ref_name }}**
            
            ## What's Changed
            This release includes the latest features and improvements to SubPilot.
            
            ## Installation
            ```bash
            git clone https://github.com/doublegate/SubPilot-App.git
            cd SubPilot-App
            npm install
            npm run build
            ```
            
            See the [README](https://github.com/doublegate/SubPilot-App#readme) for full setup instructions.
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          files: |
            artifacts/subpilot-${{ github.ref_name }}-build.tar.gz
            artifacts/subpilot-${{ github.ref_name }}-source.tar.gz
            artifacts/checksums.sha256
            docker-artifacts/subpilot-${{ github.ref_name }}-docker.tar.gz
            docker-artifacts/docker-compose.yml
            docker-artifacts/README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}